{"componentChunkName":"component---src-templates-blog-post-js","path":"/how-to-build-basic-websocket-server-python/","result":{"data":{"site":{"siteMetadata":{"title":"LimeCoda Blog"}},"markdownRemark":{"id":"80707ada-4e31-5579-a7d2-e2732af96ce1","excerpt":"Today I’m going to go through the process of creating a basic websocket server in Python. These days users on the internet demand everything in real-time, so…","html":"<p>Today I’m going to go through the process of creating a basic websocket server in Python.</p>\n<p>These days users on the internet demand everything in real-time, so being able to use websockets to serve content will become an increasingly desirable skill. With many of today’s software and technology companies making use of them, to give yourself a chance of getting a job with them, it will benefit you to understand how they work.</p>\n<p>Websockets have many use cases, including:</p>\n<ul>\n<li><strong>Social feeds</strong> – don’t wait around to see what your friends just had for dinner.</li>\n<li><strong>Communication apps</strong> – communicate with anyone in real-time.</li>\n<li><strong>Sports updates</strong> – everybody needs to know instantly what’s happening in their favourite game.</li>\n</ul>\n<p>We are going to make use of the following Python modules/libraries in this tutorial:</p>\n<ul>\n<li><a href=\"https://websockets.readthedocs.io/en/stable/index.html\">websockets</a> – the most import module in this exercise to create the websocket server that will listen for client connections.</li>\n<li><a href=\"https://docs.python.org/3/library/asyncio.html\">asyncio</a> – as the websocket server is <a href=\"https://en.wikipedia.org/wiki/I/O_bound\">I/O bound</a>, this module is also absolutely necessary to keep the server running awaiting input/output.</li>\n</ul>\n<p><strong>Before we get started, REMEMBER, this is not a production ready websocket server so should not be used for any live projects, it is just a basic demonstration!</strong></p>\n<p>With that out the way, let’s get to it…</p>\n<p>As a prerequisite, you must have <strong>Python 3</strong> installed on your system to run this project. For the websocket server we’re going to need only one file and we’ll call it <strong><code class=\"language-text\">server.py</code></strong>.</p>\n<h2>Basic websocket server</h2>\n<h4>server.py</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber 0\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python3</span>\n\n<span class=\"token keyword\">import</span> asyncio\n<span class=\"token keyword\">import</span> websockets\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">server</span><span class=\"token punctuation\">(</span>websocket<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Get received data from websocket</span>\n    data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> websocket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Send response back to client to acknowledge receiving message</span>\n    <span class=\"token keyword\">await</span> websocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"Thanks for your message: \"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Create websocket server</span>\nstart_server <span class=\"token operator\">=</span> websockets<span class=\"token punctuation\">.</span>serve<span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6789</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Start and run websocket server forever</span>\nasyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run_until_complete<span class=\"token punctuation\">(</span>start_server<span class=\"token punctuation\">)</span>\nasyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run_forever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Let’s take a look at what is happening here. Lines 13-18 are the most important lines.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber 12\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># Create websocket server</span>\nstart_server <span class=\"token operator\">=</span> websockets<span class=\"token punctuation\">.</span>serve<span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6789</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Here we create a server running on localhost at port 6789 and tell it to run the <code class=\"language-text\">server</code> function whenever a client connection is established.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber 15\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># Start and run websocket server forever</span>\nasyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run_until_complete<span class=\"token punctuation\">(</span>start_server<span class=\"token punctuation\">)</span>\nasyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run_forever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>The above lines make use of the <code class=\"language-text\">asyncio</code> module to keep the server running, awaiting connections and input.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber 5\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">server</span><span class=\"token punctuation\">(</span>websocket<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Get received data from websocket</span>\n    data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> websocket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Send response back to client to acknowledge receiving message</span>\n    <span class=\"token keyword\">await</span> websocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"Thanks for your message: \"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This is the function that will run whenever a client connection to the websocket server is established. Two arguments will be passed with each connection, the <code class=\"language-text\">websocket</code> object used to identify the client and the <code class=\"language-text\">path</code> of the client websocket (defaults to “/” if not specified by the client). This function then waits to receive data from the client and sends back a response thanking the client and repeating the data they sent.</p>\n<h2>Running the websocket server</h2>\n<p>To get the server running we simply need to open a terminal and ensure that our <code class=\"language-text\">server.py</code> file is executable, by entering the following (ensuring that we have changed directory to the directory containing the server file):</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">chmod <span class=\"token operator\">+</span>x server<span class=\"token punctuation\">.</span>py</code></pre></div>\n<p>And then typing the following to run the server:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>server<span class=\"token punctuation\">.</span>py</code></pre></div>\n<p>This process will lock up the terminal window, so to keep it running I would advise leaving the terminal window open in the background. To stop the server, you can either close the terminal or quit the process (e.g. Ctrl-C).</p>\n<h2>Testing the server</h2>\n<p>We can test if the server is working multiple ways, for example, using a Python client script or a webpage using the HTML5 websocket API.</p>\n<p>Here I’ve included a Python client script, that we will call <code class=\"language-text\">client.py</code>. This client will ask a user to enter a username and then will send it to the server and receive a response thanking them for their message and repeating their entered username back to them.</p>\n<h4>client.py</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber 0\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python3</span>\n\n<span class=\"token keyword\">import</span> asyncio\n<span class=\"token keyword\">import</span> websockets\n<span class=\"token keyword\">import</span> json\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    uri <span class=\"token operator\">=</span> <span class=\"token string\">\"ws://localhost:6789\"</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> websockets<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> websocket<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Allow user to enter username into command line</span>\n        username <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a username: \"</span><span class=\"token punctuation\">)</span>\n        data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">:</span> username<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Send username as JSON object to server</span>\n        <span class=\"token keyword\">await</span> websocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        \n        response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> websocket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n        \nasyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run_until_complete<span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>To run the client in a terminal, like <code class=\"language-text\">server.py</code> above, make sure that you make the file executable, and enter:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>client<span class=\"token punctuation\">.</span>py</code></pre></div>\n<p>Once you have been prompted for a username, entered and hit return, your terminal should resemble something like below:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">$ <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>client<span class=\"token punctuation\">.</span>py \nEnter a username<span class=\"token punctuation\">:</span> Bill\nThanks <span class=\"token keyword\">for</span> your message<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Bill\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Conclusion</h2>\n<p>That’s it! I have made any code covered in this tutorial available in a <a href=\"https://github.com/limecoda/python-websocket-server\">python-websocket-server</a> project on GitHub. Remember that this was just a basic demonstration of websockets in Python and that you will need to build on this if you would like to build a production ready websocket server, capable of much more, such as authentication.</p>","frontmatter":{"title":"How to build a basic websocket server in Python","date":"December 30, 2019","description":"Learn to build a basic websocket server in Python"}}},"pageContext":{"slug":"/how-to-build-basic-websocket-server-python/","previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}},"next":null}}}